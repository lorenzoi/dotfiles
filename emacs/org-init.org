#+TITLE: Emacs Init

* Plugins
** Productivity
*** Which Key
Which Key shows all of the completions of M-x Functions
#+BEGIN_SRC emacs-lisp

(use-package which-key
    :ensure t
    :config (which-key-mode))

#+END_SRC
 
*** Magit
#+BEGIN_SRC emacs-lisp

  ;; With Editor

  (use-package with-editor
    :ensure t)

  ;; Magit in its full glory

  (use-package magit
    :ensure t)

#+END_SRC

*** Company Mode
Company mode is an auto completion mode for Emacs.
#+BEGIN_SRC emacs-lisp

  (use-package company
    :ensure t)
  (add-hook 'after-init-hook 'global-company-mode)

  ;; Custom Backends
  (use-package company-c-headers
    :ensure t)
  (add-hook 'company-backends 'company-c-headers)
#+END_SRC

*** Ido
Ido comes preinstalled with Emacs, just not enabled
#+BEGIN_SRC emacs-lisp

  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (defalias 'list-buffers 'ibuffer)

#+END_SRC

*** God-Mode
A Toggle-able mode, when in it all keys are prefixed with C-
#+BEGIN_SRC emacs-lisp
  ;; God-Mode itself

  (use-package god-mode
    :ensure t)

  ;; Update Cursor
  (defun my-update-cursor ()
    (setq cursor-type (if (or god-local-mode buffer-read-only)
                          'box
                        'bar)))
  (add-hook 'god-mode-enabled-hook 'my-update-cursor)
  (add-hook 'god-mode-disabled-hook 'my-update-cursor)

  ;; Toggle God-Mode on Overwrite-mode
  (defun god-toggle-on-overwrite ()
    (if (bound-and-true-p overwrite-mode)
        (god-local-mode-pause)
      (god-local-mode-resume)))

  (add-hook 'overwrite-mode-hook 'god-toggle-on-overwrite)
#+END_SRC

** Syntax
*** Rust
#+BEGIN_SRC emacs-lisp

(use-package rust-mode
    :ensure t)

#+END_SRC
    
*** Markdown
Just incase Org-Mode desided to be a bitch one day.
   #+BEGIN_SRC emacs-lisp
        
(use-package markdown-mode
   :ensure t)

   #+END_SRC

*** Bison Mode
GNU-Bison mode for Lexers
#+BEGIN_SRC elisp

  (use-package bison-mode
    :ensure t)

#+END_SRC
*** Racket Mode
#+BEGIN_SRC emacs-lisp
  ;; Racket Mode
  (use-package racket-mode
    :ensure t)

  ;; Scribble Mode for HTML processing.
  (use-package scribble-mode
    :ensure t)

#+END_SRC
** Org
*** Org-Bullets
Asteriks are Ugly
#+BEGIN_SRC emacs-lisp

(use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC

*** Todo List Things
#+BEGIN_SRC emacs-lisp

  ;; Add log when TODO is set to DONE
  (setq org-log-done 'time)

  ;; TODO states
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d!)")
          (sequence "REPORT(r)" "BUG(b)" "FIX(f@)" "|" "FIXED(F!)")
          (sequence "|" "CANCELED(c@)")))

  (setq org-todo-keyword-faces
        '(("TODO" . org-warning)
          ("DONE" . (:foreground "green" :weight bold))
          ("REPORT" . org-warning)
          ("BUG" . org-warning)
          ("FIX" . org-warning)
          ("FIXED" . (:foreground "green" :weight bold))
          ("CANCELED" . (:foreground "red" :weight bold))))
          

#+END_SRC

*** Other
#+BEGIN_SRC emacs-lisp

  (setq org-src-fontify-natively t)

#+END_SRC
    
** Fun
   You have to have a little fun in your life.
*** Hacker-Typer
#+BEGIN_SRC emacs-lisp

  (use-package hacker-typer
    :ensure t)

#+END_SRC

* Keyboard Shortcuts
#+BEGIN_SRC emacs-lisp

  ;; Global
  (global-set-key (kbd "<f8>") 'compile)

  ;;; Magit
  (global-set-key (kbd "C-x g") 'magit-status)

  ;;; Company Mode
  (global-set-key (kbd "C-M-c") 'company-complete)

  ;;; God-Mode
  (global-set-key (kbd "<escape>") 'god-local-mode)
  (define-key god-local-mode-map (kbd "z") 'repeat)
  (define-key god-local-mode-map (kbd "i") 'god-local-mode)
#+END_SRC

  
